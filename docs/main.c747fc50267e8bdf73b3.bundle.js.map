{"version":3,"file":"main.c747fc50267e8bdf73b3.bundle.js","sources":["webpack:///./packages/components/src/Dialog/helpers.js"],"sourcesContent":["/* eslint-disable react/prop-types, react/no-danger, react/no-array-index-key */\nimport React from 'react';\nimport { DialogType, DeviceSize } from '@kuveytturk/boa-base';\nimport { Icon } from '../Icon';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\n\nexport function prepareLineStyle(context) {\n  const objLine = {\n    height: 1,\n    borderBottomColor: context.theme.boaPalette.base200,\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n    marginBottom: -1,\n  };\n\n  Object.assign(\n    objLine,\n    context.localization.isRightToLeft\n      ? { marginLeft: 24, marginRight: 96 }\n      : { marginLeft: 96, marginRight: 24 },\n  );\n\n  Object.assign(\n    objLine,\n    context.deviceSize <= DeviceSize.SMALL ? { marginRight: 24, marginLeft: 24 } : {},\n  );\n\n  return objLine;\n}\n\nexport function prepareCloseButtonStyle(context) {\n  const closeButtonStyle = { top: 0, right: 0 };\n  Object.assign(\n    closeButtonStyle,\n    context.localization.isRightToLeft ? { paddingLeft: 12 } : { paddingRight: 12 },\n  );\n\n  if (context.deviceSize <= DeviceSize.SMALL) {\n    Object.assign(\n      closeButtonStyle,\n      context.localization.isRightToLeft ? { paddingLeft: 4 } : { paddingRight: 4 },\n    );\n  }\n  return closeButtonStyle;\n}\n\nexport function prepareTitleStyle(context, leftTitleButton) {\n  const titleStyle = { flex: 1, paddingTop: 9 };\n\n  if (context.deviceSize <= DeviceSize.SMALL) {\n    Object.assign(\n      titleStyle,\n      context.localization.isRightToLeft\n        ? !leftTitleButton && { paddingRight: 44 }\n        : !leftTitleButton && { paddingLeft: 44 },\n    );\n  } else {\n    Object.assign(\n      titleStyle,\n      context.localization.isRightToLeft ? { paddingRight: 60 } : { paddingLeft: 60 },\n    );\n  }\n\n  return titleStyle;\n}\n\nexport function prepareDialogFormStyle(context, titleBackgroundColor) {\n  return {\n    boxSizing: 'border-box',\n    width: '100%',\n    fontSize: 16,\n    textAlign: 'center',\n    color: context.theme.boaPalette.comp500,\n    background: titleBackgroundColor,\n    padding: 0,\n    display: 'flex',\n    direction: context.localization.isRightToLeft ? 'rtl' : 'ltr',\n  };\n}\n\nexport function prepareArrayContent(content) {\n  let dialogContent = '';\n  content.forEach(item => {\n    dialogContent += `${item}<br />`;\n  });\n  dialogContent = dialogContent.replace('\\n', '<br />');\n  return dialogContent;\n}\n\nexport function divScroll(event, context) {\n  const scrollDivStyle = document.getElementById('scrollDiv').style;\n  const headerDivStyle = document.getElementById('dialogHeader').style;\n  if (event.target.scrollTop > 0) {\n    scrollDivStyle.borderTopColor = context.theme.boaPalette.base200;\n    scrollDivStyle.borderTopStyle = 'solid';\n    scrollDivStyle.borderTopWidth = 1;\n    headerDivStyle.borderBottomWidth = 1;\n    headerDivStyle.borderBottomStyle = 'solid';\n    headerDivStyle.borderBottomColor = 'transparent';\n  } else {\n    scrollDivStyle.borderTopColor = 'transparent';\n  }\n}\n\nexport function prepareObjectContent(content, context) {\n  const dialogContent = [];\n  const dialogSubContent = [];\n  const headerStyle = {\n    boxSizing: 'border-box',\n    width: '100%',\n    fontSize: 16,\n    borderTopWidth: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: 'transparent',\n    color: context.theme.boaPalette.base450,\n  };\n\n  if (context.localization.isRightToLeft) {\n    headerStyle.marginLeft = 24;\n    headerStyle.marginRight = undefined;\n  } else {\n    headerStyle.marginRight = 24;\n    headerStyle.marginLeft = undefined;\n  }\n\n  dialogContent.push(\n    <div key=\"dialogContent\" id=\"dialogHeader\" style={headerStyle}>\n      {content.mainContent}\n    </div>,\n  );\n\n  const subObj = [];\n  const subObjStyle = {\n    overflow: 'auto',\n    height: '60vh',\n    paddingLeft: 98,\n    paddingBottom: 24,\n  };\n\n  Object.assign(\n    subObjStyle,\n    context.localization.isRightToLeft\n      ? { paddingLeft: 24, paddingRight: 98, direction: 'rtl' }\n      : { direction: 'ltr' },\n  );\n\n  Object.assign(\n    subObjStyle,\n    context.deviceSize <= DeviceSize.SMALL ? { paddingLeft: 24, paddingRight: 24 } : {},\n  );\n\n  if (!content.subcontents) {\n    content.subcontents = [];\n  }\n\n  content.subcontents.forEach((item, index) => {\n    subObj.push(\n      <div\n        key={index} // eslint-disable-line\n        style={{\n          marginTop: 24,\n          fontSize: 11,\n          color: context.theme.boaPalette.base400,\n        }}\n      >\n        {item.header}\n      </div>,\n    );\n\n    if (item.contents && item.contents.length > 0) {\n      item.contents.forEach((i, j) => {\n        subObj.push(\n          <div\n            key={`${index.toString() + j.toString()}`} // eslint-disable-line\n            style={{\n              fontSize: 13,\n              color: context.theme.boaPalette.base450,\n            }}\n          >\n            {i}\n          </div>,\n        );\n      });\n    }\n  });\n\n  dialogSubContent.push(\n    <div\n      key=\"scrollDiv\"\n      id=\"scrollDiv\"\n      onScroll={event => divScroll(event, context)}\n      style={subObjStyle}\n    >\n      {subObj}\n    </div>,\n  );\n\n  return { dialogContent, dialogSubContent };\n}\n\nexport function prepareStringContent(content) {\n  let dialogContent = '';\n  const text = content.replace(/\\n/gi, '#00100#');\n  const textArray = text.split('#00100#');\n\n  textArray.forEach(item => {\n    dialogContent += `${item}<br />`;\n  });\n  dialogContent = dialogContent.replace('\\n', '<br />');\n  return dialogContent;\n}\n\nexport function prepareComponentContent(content, dialogRefs, dialogKey, style) {\n  let dialogContent = '';\n\n  /* istanbul ignore next */\n  if (content.type.prototype && content.type.prototype.isReactComponent) {\n    const contentProps = {\n      inDialog: true,\n      dialogKey,\n      ref: r => {\n        if (dialogRefs[dialogKey]) {\n          dialogRefs[dialogKey].contentRef = r;\n        }\n      },\n    };\n    dialogContent = React.cloneElement(content, contentProps);\n  } else {\n    dialogContent = content;\n  }\n\n  if (style && style.height && typeof style.height === 'string' && style.height.includes('%')) {\n    style.height = style.height.replace('%', 'vh');\n  }\n\n  if (style && style.width && typeof style.width === 'string' && style.width.includes('%')) {\n    style.width = style.width && style.width.replace('%', 'vw');\n  }\n\n  return dialogContent;\n}\n\nexport function prepareContentStyle(contentStyle, buttonEnabled, context, style) {\n  let fullScreen = false;\n  if (buttonEnabled) {\n    if (contentStyle.width > window.innerWidth) {\n      contentStyle.width = '100vw';\n    }\n    if (contentStyle.height > window.innerHeight) {\n      contentStyle.height = '100vh';\n    }\n\n    // if mobile it should be full screen\n    if (context.deviceSize <= DeviceSize.SMALL) {\n      contentStyle = Object.assign(contentStyle, { height: '100vh', width: '100vw' });\n      fullScreen = true;\n    }\n  } else {\n    contentStyle = Object.assign(contentStyle, { margin: 8 }, style);\n  }\n\n  return { customContentStyle: contentStyle, fullScreen };\n}\n\nexport function getIcon(context, type) {\n  const iconStyle = { width: 48, height: 48 };\n  switch (type) {\n    case DialogType.INFO: {\n      const icon = {\n        dynamicIcon: 'Info',\n        iconProperties: {\n          style: { ...iconStyle, color: context.theme.boaPalette.warning500 },\n        },\n      };\n      return Icon.getIcon(icon);\n    }\n    case DialogType.QUESTION: {\n      const icon = {\n        dynamicIcon: 'Help',\n        iconProperties: {\n          style: { ...iconStyle, color: context.theme.boaPalette.info500 },\n        },\n      };\n      return Icon.getIcon(icon);\n    }\n    case DialogType.WARNING: {\n      const icon = {\n        dynamicIcon: 'Error',\n        iconProperties: {\n          style: { ...iconStyle, color: context.theme.boaPalette.warning500 },\n        },\n      };\n      return Icon.getIcon(icon);\n    }\n    case DialogType.ERROR: {\n      const icon = {\n        dynamicIcon: 'Error',\n        iconProperties: {\n          style: { ...iconStyle, color: context.theme.boaPalette.warning500 },\n        },\n      };\n      return Icon.getIcon(icon);\n    }\n    case DialogType.SUCCESS: {\n      const icon = {\n        dynamicIcon: 'CheckCircle',\n        iconProperties: {\n          style: { ...iconStyle, color: context.theme.boaPalette.success500 },\n        },\n      };\n      return Icon.getIcon(icon);\n    }\n    default:\n      return null;\n  }\n}\n\n/* istanbul ignore next */\nexport function getShowStatusMessageReplacedText(value) {\n  const text = value.replace(/\\n/gi, '#00100#');\n  const textArray = text.split('#00100#');\n  const messages = [];\n  if (textArray && textArray.length > 0) {\n    if (textArray.length === 1) {\n      messages.push(<div key={0}>{textArray[0]}</div>);\n    } else {\n      textArray.forEach((item, index) => {\n        messages.push(\n          <div key={index}>\n            {item}\n            {index !== textArray.length ? <br /> : ''}\n          </div>,\n        );\n      }, this);\n    }\n  }\n  return messages;\n}\n\nexport function prepareDialog(props) {\n  const {\n    context,\n    content,\n    children,\n    dialogType,\n    dialogKey,\n    style,\n    dialogRefs,\n    showHeader,\n  } = props;\n\n  let titleWithCloseButtonEnabled = props.titleWithCloseButtonEnabled;\n  let customContentStyle = {};\n  let dialogContent;\n  let dialog = {};\n  let dialogSubContent = [];\n\n  if (!children) {\n    if (content) {\n      if (content instanceof Array) {\n        dialogContent = prepareArrayContent(content);\n      } else if (content instanceof Object && content.mainContent !== undefined) {\n        const prepared = prepareObjectContent(content, context);\n        dialogContent = prepared.dialogContent;\n        dialogSubContent = prepared.dialogSubContent;\n      } else if (typeof content === 'string' && content.includes('\\n')) {\n        dialogContent = prepareStringContent(content);\n      } else if (typeof content === 'string') {\n        dialogContent = getShowStatusMessageReplacedText(content);\n      } else {\n        dialogContent = prepareComponentContent(content, dialogRefs, dialogKey, style);\n        titleWithCloseButtonEnabled = showHeader;\n        customContentStyle = Object.assign(\n          {},\n          {\n            maxWidth: 'none',\n            height: '90vh',\n            width: '90vw',\n            overflow: 'hidden',\n          },\n          style,\n        );\n      }\n    } else {\n      dialogContent = '';\n    }\n  } else {\n    dialogContent = children;\n  }\n\n  const dIcon = getIcon(context, dialogType);\n  const buttonEnabled = titleWithCloseButtonEnabled;\n  const contentStyle = prepareContentStyle(customContentStyle, buttonEnabled, context, style);\n\n  dialog = {\n    dialogContent,\n    children,\n    icon: dIcon,\n    subContent: dialogSubContent,\n    titleWithCloseButtonEnabled,\n    customContentStyle: contentStyle.customContentStyle,\n    fullScreen: contentStyle.fullScreen,\n  };\n  return dialog;\n}\n\nexport function createDialogContent(props, dialog) {\n  const context = props.context;\n  const objLine = prepareLineStyle(context);\n  const linebreakExists =\n    typeof dialog.dialogContent === 'string' && dialog.dialogContent.includes('<br />');\n  return (\n    <MuiDialogContent style={{ padding: 0, overflow: 'hidden' }}>\n      <div>\n        <div\n          style={{\n            display: 'flex',\n            padding: 0,\n            minHeight: 96,\n            fontSize: 16,\n            direction: context.localization.isRightToLeft ? 'rtl' : 'ltr',\n          }}\n        >\n          {context.deviceSize > DeviceSize.SMALL && (\n            <div\n              style={\n                context.localization.isRightToLeft\n                  ? { paddingTop: 24, paddingRight: 24 }\n                  : { paddingTop: 24, paddingLeft: 24 }\n              }\n            >\n              {dialog.icon}\n            </div>\n          )}\n          <div\n            style={{\n              padding: props.dialogBoxContentPadding,\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            {linebreakExists ? (\n              <span dangerouslySetInnerHTML={{ __html: dialog.dialogContent }} />\n            ) : (\n              dialog.dialogContent\n            )}\n          </div>\n        </div>\n        <div style={objLine} />\n        {dialog.subContent}\n      </div>\n    </MuiDialogContent>\n  );\n}\n\nexport function getTitleBackground(dialogRefs, context) {\n  if (Object.keys(dialogRefs).length >= 1) {\n    return context.theme.boaPalette.base300;\n  }\n  return context.theme.boaPalette.pri500;\n}\n"],"mappings":"AA8BA","sourceRoot":""}